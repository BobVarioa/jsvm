
tokens {
	keywords = 'var' | 'let' | 'const' | 'typeof';
	boolean = 'true' | 'false';
	assignment = '+=' | '*=' | '-=' | '/=' | '%=' | '**=' | '??=' | '||=' | '&&=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '>>>=';
	operators = '+ ' | '* ' | '- ' | '/ ' | '% ' | '**' | '++' | '--'  | '==' | '===' | '!=' | '!==' | '>' | '<' | '>=' | '<=' | '??' | '&' | '|' | '^' | '<<' | '>>' | '>>>' | '&&' | '||' | '!';
	symbols = '(' | ')' | '?' | ':';
	string = "'" ("\\'" | [^']+)* "'" | '"' ('\\"' | [^"]+)* '"';
	number = [1-9][0-9_]+ '.' [0-9][0-9_]+ | [0-9] '.' [0-9][0-9_]+ | [1-9][0-9_]+;
	id = [a-zA-Z_][a-zA-Z_0-9]*;

	skip -> \s+; 
}

ast {
	file = statement* eof;

	statement = (declaration | expression)? ';';

	declaration = 
		'var' (name: id) '=' (expr: expression)   #var
	  | 'let' (name: id) '=' (expr: expression)   #let
	  | 'const' (name: id) '=' (expr: expression) #const;

	expression = 
	    (name: id) #var_refrence
	  | literal
	  | '(' (expr: expression) ')' #group
	  | unary
	  | binop
	  | assignmentExpr
	  | (cond: expression) '?' (consequent: expression) ':' (alternate: expression) #ternary;

	unary :
		'-' (expr: expression) #negate
	  | '+' (expr: expression) #unary_plus
	  | '--' (name: id) #decrement_front
	  | '++' (name: id) #increment_front
	  | (name: id) '--' #decrement_back
	  | (name: id) '++' #increment_back;

	binop = 
	    (lhs: expression) '+'  (rhs: expression) #add
	  | (lhs: expression) '-'  (rhs: expression) #sub
	  | (lhs: expression) '/'  (rhs: expression) #div
	  | (lhs: expression) '*'  (rhs: expression) #mul
	  | (lhs: expression) '%'  (rhs: expression) #mod
	  | (lhs: expression) '**' (rhs: expression) #exp;

	assignmentExpr = 
	    (name: id) '+='  (expr: expression) #add_assign
	  | (name: id) '-='  (expr: expression) #sub_assign
	  | (name: id) '/='  (expr: expression) #div_assign
	  | (name: id) '*='  (expr: expression) #mul_assign
	  | (name: id) '%='  (expr: expression) #mod_assign
	  | (name: id) '**=' (expr: expression) #exp_assign;

	literal = 
		(value: number) #number
	  | (value: string) #string
      | (value: boolean) #boolean;
}
