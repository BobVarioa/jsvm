
tokens {
	skip -> \s+; 
	skip -> "//" [^\n]+;

	semi = ";";
	keywords = 'var' | 'let' | 'const' | 'if';
	boolean = 'true' | 'false';
	compare = '===' | '==' | '!==' | '!=' | '>=' | '<=';
	unaryops = '++' | '--' | "~" | '!' | 'typeof';
	assignment = 
		'=' 
		| '+=' | '-=' 
		| '**=' 
		| '*=' | '/=' | '%=' 
		| '??=' | '||=' | '&&=' 
		| '&=' | '|=' | '^=' 
		| '>>>=' | '<<=' | '>>=';
	logical = '??' | '&&' | '||';
	ops = '**';
	binary = '&' | '|' | '^' | '>>>' | '<<' | '>>';
	compare =  '>' | '<';
	mult = '%' | '*' | '/';
	add = '+' | '-';
	symbols = '(' | ')' | '?' | ':' | "{" | "}";
	string = "'" ("\\'" | [^'])* "'" | '"' ('\\"' | [^"])* '"';
	number = ([1-9][0-9_]+ | [0-9]) ('.' [0-9][0-9_]*)?;
	id = [a-zA-Z_][a-zA-Z_0-9]*;
}

ast {
	file = (content: statement*);

	statement = 
		(content: declaration) ';' #declaration
		| 'if' '(' (expr: expression) ')' '{' (body: statement*) '}' #if
		| (content: expression)  ';' #expression
		| ";" #empty;

	declaration = 
		'var' (name: id) '=' (expr: expression)   #var
	  | 'let' (name: id) '=' (expr: expression)   #let
	  | 'const' (name: id) '=' (expr: expression) #const
	  | (name: id) (op: assignment) (expr: expression) #assign;

	value =
		(value: number) #number
	  | (value: string) #string
      | (value: boolean) #boolean
	  | (name: id) #variable
	  | '(' (expr: expression) ')' #group;

	// 3-4-5
	expression =
	    (op: unaryops) (expr: value) #unary_front
	  | (name: id) '--' #decrement_back
	  | (name: id) '++' #increment_back
	  | value
	  | (lhs: value) (op: '**') (rhs: expression) #binop
	  | (lhs: expression) (op: '%' | '*' | '/') (rhs: expression) #binop
	  | (lhs: expression) (op: '+' | '-') (rhs: expression) #binop
	  | (lhs: expression) (op: binary | compare | logical) (rhs: expression) #binop;
}